name: Barrier Release Build (macOS)

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest  # Use latest macOS for better toolchain support

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Xcode Command Line Tools
      run: |
        # Ensure Xcode command line tools are properly set up
        sudo xcode-select --install || true
        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer

    - name: Set up environment
      run: |
        echo "TERM=xterm-256color" >> $GITHUB_ENV
        echo "B_BUILD_TYPE=Release" >> $GITHUB_ENV
        # Set C++ flags to help with linking
        echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
        echo "LDFLAGS=-stdlib=libc++" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        brew update
        brew install qt@5 cmake create-dmg openssl
        
        # Set up Qt5 paths
        export QT5_PREFIX=$(brew --prefix qt@5)
        echo "CMAKE_PREFIX_PATH=${QT5_PREFIX}" >> $GITHUB_ENV
        echo "Qt5_DIR=${QT5_PREFIX}/lib/cmake/Qt5" >> $GITHUB_ENV
        echo "PATH=${QT5_PREFIX}/bin:$PATH" >> $GITHUB_ENV

    - name: Verify Qt5 installation
      run: |
        echo "=== Qt5 installation check ==="
        QT5_PREFIX=$(brew --prefix qt@5)
        echo "Qt5 prefix: $QT5_PREFIX"
        ls -la "$QT5_PREFIX/lib/cmake/Qt5/" || echo "Qt5 cmake files not found"
        ls -la "$QT5_PREFIX/bin/" || echo "Qt5 binaries not found"

    - name: Verify C++ toolchain
      run: |
        echo "=== C++ toolchain check ==="
        which clang++
        clang++ --version
        echo "CXXFLAGS: $CXXFLAGS"
        echo "LDFLAGS: $LDFLAGS"

    - name: Set release version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        
    - name: Build Barrier with Bundle
      run: |
        set -e
        set -x
        
        # Set up Qt5 environment
        QT5_PREFIX=$(brew --prefix qt@5)
        export CMAKE_PREFIX_PATH="$QT5_PREFIX"
        export Qt5_DIR="$QT5_PREFIX/lib/cmake/Qt5"
        export PATH="$QT5_PREFIX/bin:$PATH"
        
        # Ensure C++ standard library is properly linked
        export CXXFLAGS="-stdlib=libc++ $CXXFLAGS"
        export LDFLAGS="-stdlib=libc++ $LDFLAGS"
        
        # Create build directory
        mkdir -p build
        cd build
        
        # Configure CMake with explicit C++ settings
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DBARRIER_BUILD_INSTALLER=ON \
              -DBARRIER_BUILD_TESTS=OFF \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
              -DCMAKE_PREFIX_PATH="$QT5_PREFIX" \
              -DQt5_DIR="$QT5_PREFIX/lib/cmake/Qt5" \
              -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
              -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++" \
              -DCMAKE_SHARED_LINKER_FLAGS="-stdlib=libc++" \
              ..
        
        # Build only the main targets
        make barrier barriers barrierc -j$(sysctl -n hw.ncpu)
        
        # Build the macOS bundle target
        make Barrier_MacOS

    - name: Verify bundle creation
      run: |
        echo "=== Looking for bundle directory ==="
        find . -name "bundle" -type d
        echo "=== Looking for Barrier.app ==="
        find . -name "Barrier.app" -type d
        echo "=== Bundle contents ==="
        if [
