name: Barrier Release Build (macOS)

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Xcode and environment
      run: |
        # Ensure Xcode command line tools are properly set up
        sudo xcode-select --install || true
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        
        echo "TERM=xterm-256color" >> $GITHUB_ENV
        echo "B_BUILD_TYPE=Release" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        brew update
        brew install qt@5 cmake create-dmg openssl
        
        # Set up Qt5 paths
        export QT5_PREFIX=$(brew --prefix qt@5)
        echo "CMAKE_PREFIX_PATH=${QT5_PREFIX}" >> $GITHUB_ENV
        echo "Qt5_DIR=${QT5_PREFIX}/lib/cmake/Qt5" >> $GITHUB_ENV
        echo "PATH=${QT5_PREFIX}/bin:$PATH" >> $GITHUB_ENV

    - name: Create CMake patch for C++ linking
      run: |
        # Create a patch to fix the CMakeLists.txt linking issue
        cat > cmake_fix.patch << 'EOF'
        --- a/src/gui/CMakeLists.txt
        +++ b/src/gui/CMakeLists.txt
        @@ -131,6 +131,11 @@ add_executable (barrier WIN32
         
         include_directories (./src)
         
        +# Fix for macOS C++ standard library linking
        +if (APPLE)
        +    target_link_libraries(barrier "-stdlib=libc++")
        +endif()
        +
         target_link_libraries(barrier net base io Qt5::Core Qt5::Widgets Qt5::Network ${OPENSSL_LIBS})
         target_compile_definitions (barrier PRIVATE -DBARRIER_VERSION_STAGE="${BARRIER_VERSION_STAGE}")
         target_compile_definitions (barrier PRIVATE -DBARRIER_REVISION="${BARRIER_REVISION}")
        EOF
        
        # Apply the patch
        patch -p1 < cmake_fix.patch

    - name: Verify Qt5 installation
      run: |
        echo "=== Qt5 installation check ==="
        QT5_PREFIX=$(brew --prefix qt@5)
        echo "Qt5 prefix: $QT5_PREFIX"
        ls -la "$QT5_PREFIX/lib/cmake/Qt5/" || echo "Qt5 cmake files not found"
        ls -la "$QT5_PREFIX/bin/" || echo "Qt5 binaries not found"

    - name: Set release version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        
    - name: Build Barrier with Bundle
      run: |
        set -e
        set -x
        
        # Set up Qt5 environment
        QT5_PREFIX=$(brew --prefix qt@5)
        export CMAKE_PREFIX_PATH="$QT5_PREFIX"
        export Qt5_DIR="$QT5_PREFIX/lib/cmake/Qt5"
        export PATH="$QT5_PREFIX/bin:$PATH"
        
        # Create build directory
        mkdir -p build
        cd build
        
        # Configure CMake with comprehensive C++ flags
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DBARRIER_BUILD_INSTALLER=ON \
              -DBARRIER_BUILD_TESTS=OFF \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
              -DCMAKE_PREFIX_PATH="$QT5_PREFIX" \
              -DQt5_DIR="$QT5_PREFIX/lib/cmake/Qt5" \
              -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
              -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++" \
              -DCMAKE_SHARED_LINKER_FLAGS="-stdlib=libc++" \
              -DCMAKE_MODULE_LINKER_FLAGS="-stdlib=libc++" \
              ..
        
        # Build only the main targets
        make barrier barriers barrierc -j$(sysctl -n hw.ncpu)
        
        # Build the macOS bundle target
        make Barrier_MacOS

    - name: Verify bundle creation
      run: |
        echo "=== Looking for bundle directory ==="
        find . -name "bundle" -type d
        echo "=== Looking for Barrier.app ==="
        find . -name "Barrier.app" -type d
        echo "=== Bundle contents ==="
        if [ -d "build/bundle/Barrier.app" ]; then
          ls -la build/bundle/Barrier.app/
        else
          echo "Barrier.app not found in expected location"
          find . -name "*.app" -type d
        fi

    - name: Create DMG
      run: |
        cd build
        if [ -d "bundle/Barrier.app" ]; then
          create-dmg \
            --volname "Barrier ${{ env.RELEASE_VERSION }}" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "Barrier.app" 175 120 \
            --hide-extension "Barrier.app" \
            --app-drop-link 425 120 \
            "Barrier-${{ env.RELEASE_VERSION }}-macOS.dmg" \
            bundle/
        else
          echo "Barrier.app not found in expected location"
          exit 1
        fi

    - name: Upload Release Asset
      uses: actions/upload-artifact@v4
      with:
        name: Barrier-${{ env.RELEASE_VERSION }}-macOS
        path: build/Barrier-${{ env.RELEASE_VERSION }}-macOS.dmg
        if-no-files-found: error
